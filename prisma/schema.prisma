generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Project {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(255)
  description String? @db.Text
  thumbnails  String  @db.Text
  status      Status  @default(NOT_STARTED)

  @@index([status]) // Index on status for faster queries
  @@map("projects")
}

model Post {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(255)
  description String?    @db.Text
  content     String     @db.Text
  publishDate DateTime   @default(now())
  status      PostStatus @default(DRAFT)
  comments    Comment[]

  @@index([id]) // Index on id for faster queries
  @@index([status]) // Index on status for faster queries
  @@index([publishDate]) // Index on publishDate for faster queries
  @@map("blog_posts")
}

model Comment {
  id          Int      @id @default(autoincrement())
  postId      String
  authorId    String
  content     String   @db.Text
  commentDate DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])

  @@index([postId]) // Index on postId for faster lookups
  @@index([authorId]) // Index on authorId for faster lookups
  @@map("comments")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
